num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
countries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model.txt",
data = list(
'temp_x'=temp,
'precip_x'=precip,
'gdp_y'=gdp,
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded
)
)
library(rjags)
library(coda)
library(tidyr)
library(data.table)
burke.data <- read.csv("environmental_bayesian_modeling/data/burke/data/input/GrowthClimateDataset.csv",header=TRUE)
burke.data <- burke.data %>% drop_na(c('growthWDI','UDel_temp_popweight','UDel_precip_popweight'))
# TODO: remove countries with no climate data
# TODO: add gradual effects
countries <- burke.data[,1]
years <- burke.data[,2]
gdp <- burke.data[,11]
temp <- burke.data[,28]
precip <- burke.data[,29]
grad_effects <- transpose(burke.data[, grep(pattern ='X_yi_*', names(burke.data))])
grad_effects_2 <- transpose(burke.data[, grep(pattern ='X_y2_*', names(burke.data))])
data_len <- dim(burke.data)[1]
num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
countries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model.txt",
data = list(
'temp_x'=temp,
'precip_x'=precip,
'gdp_y'=gdp,
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded
)
)
load("~/environmental_bayesian_modeling/models/burke_reproduction_unscaled.Rdata")
jags.output.coda
mean(jags.output.coda$precip)
jags.output.coda[[1]]
jags.output.coda[[1]][1]
jags.output.coda[[1]][2]
jags.output.coda[[1]][10000]
jags.output.coda[[1]][10001]
jags.output.coda[[1]][10000]
jags.output.coda[[1]][100000]
library(rjags)
library(coda)
library(tidyr)
library(data.table)
burke.data <- read.csv("environmental_bayesian_modeling/data/burke/data/input/GrowthClimateDatasetTruncated.csv",header=TRUE)
burke.data <- burke.data %>% drop_na(c('growthWDI','UDel_temp_popweight','UDel_precip_popweight'))
# TODO: remove countries with no climate data
# TODO: add gradual effects
countries <- burke.data[,1]
years <- burke.data[,2]
gdp <- burke.data[,11]
temp <- burke.data[,28]
precip <- burke.data[,29]
grad_effects <- transpose(burke.data[, grep(pattern ='X_yi_*', names(burke.data))])
grad_effects_2 <- transpose(burke.data[, grep(pattern ='X_y2_*', names(burke.data))])
data_len <- dim(burke.data)[1]
num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
countries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
scaled_temp <- scale(temp)
scaled_precip <- scale(precip)
scaled_gdp <- scale(gdp)
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model_covariate_deterministic.txt",
data = list(
'temp_x'=as.numeric(scaled_temp),
'precip_x'=as.numeric(scaled_precip),
'gdp_y'=as.numeric(scaled_gdp),
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded,
'grad_effects_data'=grad_effects,
'grad_effects_2_data'=grad_effects_2
)
)
library(rjags)
library(coda)
library(tidyr)
library(data.table)
burke.data <- read.csv("environmental_bayesian_modeling/data/burke/data/input/GrowthClimateDatasetTruncated.csv",header=TRUE)
burke.data <- burke.data %>% drop_na(c('growthWDI','UDel_temp_popweight','UDel_precip_popweight'))
# TODO: remove countries with no climate data
# TODO: add gradual effects
countries <- burke.data[,1]
years <- burke.data[,2]
gdp <- burke.data[,11]
temp <- burke.data[,28]
precip <- burke.data[,29]
grad_effects <- transpose(burke.data[, grep(pattern ='X_yi_*', names(burke.data))])
grad_effects_2 <- transpose(burke.data[, grep(pattern ='X_y2_*', names(burke.data))])
data_len <- dim(burke.data)[1]
num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
countries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
scaled_temp <- scale(temp)
scaled_precip <- scale(precip)
scaled_gdp <- scale(gdp)
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model_covariate_deterministic.txt",
data = list(
'temp_x'=as.numeric(scaled_temp),
'precip_x'=as.numeric(scaled_precip),
'gdp_y'=as.numeric(scaled_gdp),
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded,
'grad_effects_data'=grad_effects,
'grad_effects_2_data'=grad_effects_2
)
)
library(rjags)
library(coda)
library(tidyr)
library(data.table)
burke.data <- read.csv("environmental_bayesian_modeling/data/burke/data/input/GrowthClimateDatasetTruncated.csv",header=TRUE)
burke.data <- burke.data %>% drop_na(c('growthWDI','UDel_temp_popweight','UDel_precip_popweight'))
# TODO: remove countries with no climate data
# TODO: add gradual effects
countries <- burke.data[,1]
years <- burke.data[,2]
gdp <- burke.data[,11]
temp <- burke.data[,28]
precip <- burke.data[,29]
grad_effects <- transpose(burke.data[, grep(pattern ='X_yi_*', names(burke.data))])
grad_effects_2 <- transpose(burke.data[, grep(pattern ='X_y2_*', names(burke.data))])
data_len <- dim(burke.data)[1]
num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
countries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
scaled_temp <- scale(temp)
scaled_precip <- scale(precip)
scaled_gdp <- scale(gdp)
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model_covariate_deterministic.txt",
data = list(
'temp_x'=as.numeric(scaled_temp),
'precip_x'=as.numeric(scaled_precip),
'gdp_y'=as.numeric(scaled_gdp),
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded,
'grad_effects_data'=grad_effects,
'grad_effects_2_data'=grad_effects_2
)
)
View(burke.data)
load("~/environmental_bayesian_modeling/models/nature_reproduction/burke_reproduction_scaled_deterministic_covariates_4_chains.RData")
temp_coef <- jags.output.coda[[1]][,5]
temp_coef_2 <- jags.output.coda[[1]][,6]
temp_denominator <- sapply(temp_coef_2, function(i){i*-2})
temp_vertex <- temp_coef / temp_denominator
temp_observed_mean <- attributes(scaled_temp)$`scaled:center`
temp_observed_sd <- attributes(scaled_temp)$`scaled:scale`
unscaled_temp_vertex <- (temp_vertex * temp_observed_sd) + temp_observed_mean
print(mean(unscaled_temp_vertex))
print(sd(unscaled_temp_vertex))
temp_coef <- jags.output.coda[[2]][,5]
jags.output.coda
result <- c("test")
save.image(file='environmental_bayesian_modeling/yoursession.RData')
load("~/environmental_bayesian_modeling/yoursession.RData")
load("~/environmental_bayesian_modeling/yoursession.RData")
load("~/environmental_bayesian_modeling/models/nature_reproduction/burke_missing_data_imputed_hierarchical_country_priors.RData")
temp_coef <- as.vector(rbind(jags.output.coda[[1]][,5],jags.output.coda[[2]][,5],jags.output.coda[[3]][,5],jags.output.coda[[4]][,5]))
temp_coef_2 <- as.vector(rbind(jags.output.coda[[1]][,6],jags.output.coda[[2]][,6],jags.output.coda[[3]][,6],jags.output.coda[[4]][,6]))
temp_denominator <- sapply(temp_coef_2, function(i){i*-2})
temp_vertex <- temp_coef / temp_denominator
temp_observed_mean <- attributes(scaled_temp)$`scaled:center`
temp_observed_sd <- attributes(scaled_temp)$`scaled:scale`
unscaled_temp_vertex <- (temp_vertex * temp_observed_sd) + temp_observed_mean
print(mean(unscaled_temp_vertex))
print(sd(unscaled_temp_vertex))
coda::gelman.diag(jags.output.coda)
plot(jags.output.coda)
coda::gelman.plot(jags.output.coda)
temp_coef <- jags.output.coda[[1]][,5]
temp_coef_2 <- jags.output.coda[[1]][,6]
temp_denominator <- sapply(temp_coef_2, function(i){i*-2})
temp_vertex <- temp_coef / temp_denominator
temp_observed_mean <- attributes(scaled_temp)$`scaled:center`
temp_observed_sd <- attributes(scaled_temp)$`scaled:scale`
unscaled_temp_vertex <- (temp_vertex * temp_observed_sd) + temp_observed_mean
print(mean(unscaled_temp_vertex))
print(sd(unscaled_temp_vertex))
temp_coef <- jags.output.coda[[2]][,5]
> temp_coef_2 <- jags.output.coda[[2]][,6]
temp_coef <- jags.output.coda[[2]][,5]
temp_coef_2 <- jags.output.coda[[2]][,6]
temp_denominator <- sapply(temp_coef_2, function(i){i*-2})
temp_vertex <- temp_coef / temp_denominator
temp_observed_mean <- attributes(scaled_temp)$`scaled:center`
temp_observed_sd <- attributes(scaled_temp)$`scaled:scale`
unscaled_temp_vertex <- (temp_vertex * temp_observed_sd) + temp_observed_mean
print(mean(unscaled_temp_vertex))
coda::effective_size(jags.output.coda)
effective_size(jags.output.coda)
coda::effectiveSize(jags.output.coda)
jags.output.coda <- thin(jags.output.coda,2)
jags.output.coda <- coda::thin(jags.output.coda,2)
jags.output.coda
jags.output.coda[[1]]
load("~/environmental_bayesian_modeling/models/nature_reproduction/burke_missing_data_imputed_hierarchical_country_priors.RData")
jags.outout.coda
print(jags.output.coda)
thinned_chain <- coda::thin(jags.output.coda)
print(thinned_chain)
thinned_chain <- jags.output.coda[seq(1, length(jags.output.coda), by = 2), ]
print(thinned_chain)
thinned_chain <- jags.output.coda[seq(1, 1000, by = 2), ]
thinned_chain
coda::gelman.diag(jags.output.coda)
coda::gelman.diag(thinned_chain)
thinned_chain
jags.output.coda
mcmc.list(thinned_chain)
thinned_chain <- coda::window(jags.output.coda, 0, 1000, 2)
thinned_chain <- window(jags.output.coda, 0, 1000, 2)
thinned_chain <- window(jags.output.coda[[1]], 0, 1000, 2)
thinned_chain <- coda::window.mcmc(jags.output.coda, 0, 1000, 2)
thinned_chain <- coda::window.mcmc(jags.output.coda, thin=2)
thinned_chain <- window(jags.output.coda, thin=2)
thinned_chain
coda::gelman.diag(thinned_chain)
coda::gelman.diag(jags.output.coda)
thinned_chain <- window(jags.output.coda, thin=10)
coda::gelman.diag(thinned_chain)
load("~/environmental_bayesian_modeling/models/nature_reproduction/burke_reproduction_scaled_deterministic_covariates_4_chains.RData")
temp_coef <- as.vector(rbind(jags.output.coda[[1]][,5],jags.output.coda[[2]][,5],jags.output.coda[[3]][,5],jags.output.coda[[4]][,5]))
temp_coef_2 <- as.vector(rbind(jags.output.coda[[1]][,6],jags.output.coda[[2]][,6],jags.output.coda[[3]][,6],jags.output.coda[[4]][,6]))
temp_denominator <- sapply(temp_coef_2, function(i){i*-2})
temp_vertex <- temp_coef / temp_denominator
temp_observed_mean <- attributes(scaled_temp)$`scaled:center`
temp_observed_sd <- attributes(scaled_temp)$`scaled:scale`
unscaled_temp_vertex <- (temp_vertex * temp_observed_sd) + temp_observed_mean
print(mean(unscaled_temp_vertex))
print(sd(unscaled_temp_vertex))
coda::gelman.diag(jags.output.coda)
coda::effective_size(jags.output.coda)
load("~/environmental_bayesian_modeling/models/nature_reproduction/burke_missing_data_imputed_hierarchical_country_priors.RData")
temp_coef <- as.vector(rbind(jags.output.coda[[1]][,5],jags.output.coda[[2]][,5],jags.output.coda[[3]][,5],jags.output.coda[[4]][,5]))
temp_coef_2 <- as.vector(rbind(jags.output.coda[[1]][,6],jags.output.coda[[2]][,6],jags.output.coda[[3]][,6],jags.output.coda[[4]][,6]))
temp_denominator <- sapply(temp_coef_2, function(i){i*-2})
temp_vertex <- temp_coef / temp_denominator
temp_observed_mean <- attributes(scaled_temp)$`scaled:center`
temp_observed_sd <- attributes(scaled_temp)$`scaled:scale`
unscaled_temp_vertex <- (temp_vertex * temp_observed_sd) + temp_observed_mean
print(mean(unscaled_temp_vertex))
print(sd(unscaled_temp_vertex))
coda::gelman.diag(jags.output.coda)
coda::effective_size(jags.output.coda)
plot(jags.output.coda)
res <- readRDS("~/environmental_bayesian_modeling/data/ortiz-bobea/data2/results_ncases313_nboot500_nperm10000_npairs2000-002.RDS")
res$out[[3]]$impacts
reg$out[[2]]$case
res$out[[2]]$case
res$out[[3]]$case
res$out[[1]]$case
res$out[[0]]$case
results <- res
gcms <- names(results$out[[1]]$impacts)
gcms
sample <- data.frame(gcm=sample(gcms,2000, replace = T), boot=sample(1:1000,2000,replace = T))
sample
t <- out[[paste(sample$gcm[1])]]$cumimp.global[,c("year", paste0(sample$boot[1]))]
out <- results$out[[3]]$impacts
t <- out[[paste(sample$gcm[1])]]$cumimp.global[,c("year", paste0(sample$boot[1]))]
t
imps2 <- lapply(1:2000, function(j) {
t <- out[[paste(sample$gcm[j])]]$cumimp.global[,c("year", paste0(sample$boot[j]))]
t2 <- data.frame(year=1960:2020, temp=NA)
names(t2) <- names(t)
rbind(t,t2)
})
sample$gcm[1]
sample$boot[1]
out[["MIROC6"]]$cumimp.global$"year"
c("year", paste0(sample$boot[j]))
c("year", paste0(sample$boot[1]))
out[["MIROC6"]]$cumimp.global[,c("year", 439)]
imps2 <- lapply(1:2000, function(j) {
t <- out[[paste(sample$gcm[j])]]$cumimp.global[,c("year", paste0(sample$boot[j]))]
t2 <- data.frame(year=1960:2020, temp=NA)
names(t2) <- names(t)
rbind(t,t2)
})
exit
exit()
quit()
year
imps2 <- lapply(1:2000, function(j) {
t <- out[[paste(sample$gcm[j])]]$cumimp.global[,c("year", paste0(sample$boot[j]))
})
imps2 <- lapply(1:2000, function(j) {
t <- out[[paste(sample$gcm[j])]]$cumimp.global[,c("year", paste0(sample$boot[j]))]
})
imps2 <- lapply(1:3, function(j) {
t <- out[[paste(sample$gcm[j])]]$cumimp.global[,c("year", paste0(sample$boot[j]))]
})
t <- out[[paste(sample$gcm[1])]]$cumimp.global[,c("year", paste0(sample$boot[1]))]
t
t <- out[[paste(sample$gcm[2])]]$cumimp.global[,c("year", paste0(sample$boot[2]))]
t <- out[[paste(sample$gcm[3])]]$cumimp.global[,c("year", paste0(sample$boot[3]))]
sample$gcm[3]
sample$boot[3]
out[[paste(sample$gcm[3])]]$cumimp.global[,c("year", paste0(sample$boot[2]))]
out[[paste(sample$gcm[3])]]$cumimp.global$"year"
,c("year", paste0(sample$boot[3]))
c("year", paste0(sample$boot[3]))
sample$gcm[3]
sample <- data.frame(gcm=sample(gcms,2000, replace = T), boot=sample(1:500,2000,replace = T))
imps2 <- lapply(1:nrow(sample), function(j) {
t <- out[[paste(sample$gcm[j])]]$cumimp.global[,c("year", paste0(sample$boot[j]))]
t2 <- data.frame(year=1962:2020, temp=NA)
names(t2) <- names(t)
rbind(t,t2)
})
imps2
temp2 <- imps2[[1]]
temp2
results <- readRDS("~/environmental_bayesian_modeling/data/ortiz-bobea/data2/results_ncases313_nboot500_nperm10000_npairs2000-002.RDS")
gcms <- names(results$out[[1]]$impacts)
set.seed(123)
sample <- data.frame(gcm=sample(gcms,misc$n, replace = T), boot=sample(1:misc$nboot,misc$n,replace = T))
sample <- data.frame(gcm=sample(gcms,2000, replace = T), boot=sample(1:500,2000,replace = T))
out <- results$out[[3]]$impacts
imps2 <- lapply(1:nrow(sample), function(j) {
t <- out[[paste(sample$gcm[j])]]$cumimp.global[,c("year", paste0(sample$boot[j]))]
t2 <- data.frame(year=(max(t$year)+1):2020, temp=NA)
names(t2) <- names(t)
rbind(t,t2)
})
imps2
temp2 <- imps2[[1]]
temp2
imps2[[0]]
imps2[[2]]
imps2[[1]]
imps2  <- sapply(imps2, function(df) df[,2])
imps2
rownames(imps2) <- temp2[,1]
imps2[[1]]
imps2[[2]]
imps2[[3]]
imps2[[2000]]
imps2[[2001]]
View(imps2)
rowmeans(imp2)
rowMeans(imp2)
rowMeans(imps2)
bands2 <- t(apply(imps2,1,function(x) c(mean(x, na.rm=T),quantile(x,c(.05,.1,.5,.9,.95), na.rm=T))))
View(bands2)
bands2 <- toper(bands2)
toper <- function(x) { (100*(exp(x)-1))}
bands2 <- toper(bands2)
View(bands2)
bands2 <- t(apply(imps2,1,function(x) c(mean(x, na.rm=T),quantile(x,c(.05,.1,.5,.9,.95), na.rm=T))))
View(bands2)
bands2 <- toper(bands2)
View(bands2)
imps2 <- toper(imps2)
View(imps2)
backyears <- apply(bands, 2, function(x) which.min(abs(x-global2$tfp[nrow(global2)])))
rowMeans(imps2)
View(bands2)
getwd()
setwd("environmental_bayesian_modeling/data/ortiz-bobea")
library(readr)
regdata_preferred_case <- read_csv("data2/regdata_preferred_case.csv")
View(regdata_preferred_case)
nfolds <- c(10,length(unique(regdata$year)))
regdata <- regdata_preferred_case
nfolds <- c(10,length(unique(regdata$year)))
nfolds
years <- unique(regdata$year)
ylist <- split(sample(years, length(years)), cut(seq(1,length(years)),breaks=nfold,labels=FALSE))
mse <- do.call("rbind",lapply(nfolds, function(nfold) {print(nfold)}
mse <- do.call("rbind",lapply(nfolds, function(nfold) {print(nfold)}
ylist <- split(sample(years, length(years)), cut(seq(1,length(years)),breaks=1,labels=FALSE))
lapply(nfolds, function(nfold) {print(nfold)})
do.call("rbind",lapply(nfolds, function(nfold) {print(nfold)}))
ylist <- split(sample(years, length(years)), cut(seq(1,length(years)),breaks=10,labels=FALSE))
ylist
nfolds <- c(10,length(unique(regdata$year)))
# Loop over different number of folds
mse <- do.call("rbind",lapply(nfolds, function(nfold) {
#print(k)
set.seed(123)
years <- unique(regdata$year)
ylist <- split(sample(years, length(years)), cut(seq(1,length(years)),breaks=nfold,labels=FALSE))
print(ylist)
}))
all <- data.frame(cbind(reg$cY,reg$cX))
formula <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year | 0 | ISO3 + block")
reg <- felm(f, regdata, Nboot=1000, keepCX=T, keepX=T, clustervar=as.factor(regdata$block), weights=regdata$weights)
library(felm)
library(fe)
library(lfe)
reg <- felm(f, regdata, Nboot=1000, keepCX=T, keepX=T, clustervar=as.factor(regdata$block), weights=regdata$weights)
reg <- felm(formula, regdata, Nboot=1000, keepCX=T, keepX=T, clustervar=as.factor(regdata$block), weights=regdata$weights)
reg$cY
all <- data.frame(cbind(reg$cY,reg$cX))
all$ISO3 <- regdata$ISO3
all$year <- regdata$year
y <- reg$lhs
x <- rownames(reg$beta)
data.frame(original.lfe=coef(reg), recoded.lsdv=coef(lm(all[,-c(ncol(all)-1,ncol(all))]))[-1])
sum((coef(reg)-coef(lm(all[,-c(ncol(all)-1,ncol(all))]))[-1])^2, na.rm=T)
View(mse)
View(all)
length(ylist)
train <- all[!(all$year %in% unlist(ylist[1])), -c(ncol(all)-1,ncol(all))]
View(train)
test  <- all[   all$year %in% unlist(ylist[1]), -c(ncol(all)-1,ncol(all))]
ylist[1]
y
View(ylist)
paste(y,"~1")
newreg <- lm(as.formula(paste(y,"~1")), train)
View(newreg)
yhat <- predict(newreg,test)
yhat
mean( (yhat-test[,1])^2 )
newreg <- lm(train)
yhat <- predict(newreg,test)
mean( (yhat-test[,1])^2 )
library(stringmagic)
library(fixest)
regdata <- read.csv("data2/regdata_preferred_case.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year")
reg <- feols(regdata, f)
summary(reg)
library(lfe)
regdata <- read.csv("data2/regdata_train.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year | 0 | ISO3 + block")
reg <- felm(f, regdata, keepCX=T, keepX=T, clustervar=as.factor(regdata$block), weights=regdata$weights)
summary(reg)
library(lfe)
regdata <- read.csv("data2/regdata_train.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year | 0 | ISO3 + block")
reg <- felm(f, regdata)
summary(reg)
library(lfe)
regdata <- read.csv("data2/regdata_train.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year | 0 | 0")
reg <- felm(f, regdata)
summary(reg)
library(lfe)
regdata <- read.csv("data2/regdata_train.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | 0 | 0 | 0")
reg <- felm(f, regdata)
summary(reg)
library(stringmagic)
library(fixest)
regdata <- read.csv("data2/regdata_train.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year")
reg <- feols(regdata, f)
summary(reg)
library(lfe)
regdata <- read.csv("data2/regdata_train.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year | 0 | ISO3 + block")
reg <- felm(f, regdata, Nboot=1000, keepCX=T, keepX=T, clustervar=as.factor(regdata$block), weights=regdata$weights)
summary(reg)
library(stringmagic)
library(fixest)
regdata <- read.csv("data2/regdata_preferred_case.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year")
reg <- feols(regdata, f)
summary(reg)
library(lfe)
regdata <- read.csv("data2/regdata_preferred_case.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year | 0 | 0")
reg <- felm(f, regdata)
summary(reg)
