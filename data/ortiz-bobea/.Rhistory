years <- burke.data[,2]
gdp <- burke.data[,11]
temp <- burke.data[,28]
precip <- burke.data[,29]
grad_effects <- transpose(burke.data[, grep(pattern ='X_yi_*', names(burke.data))])
grad_effects_2 <- transpose(burke.data[, grep(pattern ='X_y2_*', names(burke.data))])
data_len <- dim(burke.data)[1]
num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
gcountries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
reg_grad_effects <- matrix(0,data_len,grad_effects_len)
reg_grad_effects_2 <- matrix(0,data_len,grad_effects_len)
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model.txt",
data = list(
'temp_x'=temp,
'precip_x'=precip,
'gdp_y'=gdp,
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded,
'grad_effects_data'=grad_effects,
'grad_effects_2_data'=grad_effects_2,
'reg_grad_effects'=reg_grad_effects,
'reg_grad_effects_2'=reg_grad_effects_2
)
)
library(rjags)
library(coda)
library(tidyr)
library(data.table)
burke.data <- read.csv("environmental_bayesian_modeling/data/burke/data/input/GrowthClimateDataset.csv",header=TRUE)
burke.data <- burke.data %>% drop_na(c('growthWDI','UDel_temp_popweight','UDel_precip_popweight'))
# TODO: remove countries with no climate data
# TODO: add gradual effects
countries <- burke.data[,1]
years <- burke.data[,2]
gdp <- burke.data[,11]
temp <- burke.data[,28]
precip <- burke.data[,29]
grad_effects <- transpose(burke.data[, grep(pattern ='X_yi_*', names(burke.data))])
grad_effects_2 <- transpose(burke.data[, grep(pattern ='X_y2_*', names(burke.data))])
data_len <- dim(burke.data)[1]
num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
countries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
reg_grad_effects <- matrix(0,data_len,grad_effects_len)
reg_grad_effects_2 <- matrix(0,data_len,grad_effects_len)
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model.txt",
data = list(
'temp_x'=temp,
'precip_x'=precip,
'gdp_y'=gdp,
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded,
'grad_effects_data'=grad_effects,
'grad_effects_2_data'=grad_effects_2,
'reg_grad_effects'=reg_grad_effects,
'reg_grad_effects_2'=reg_grad_effects_2
)
)
library(rjags)
library(coda)
library(tidyr)
library(data.table)
burke.data <- read.csv("environmental_bayesian_modeling/data/burke/data/input/GrowthClimateDataset.csv",header=TRUE)
burke.data <- burke.data %>% drop_na(c('growthWDI','UDel_temp_popweight','UDel_precip_popweight'))
# TODO: remove countries with no climate data
# TODO: add gradual effects
countries <- burke.data[,1]
years <- burke.data[,2]
gdp <- burke.data[,11]
temp <- burke.data[,28]
precip <- burke.data[,29]
grad_effects <- transpose(burke.data[, grep(pattern ='X_yi_*', names(burke.data))])
grad_effects_2 <- transpose(burke.data[, grep(pattern ='X_y2_*', names(burke.data))])
data_len <- dim(burke.data)[1]
num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
countries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
reg_grad_effects <- matrix(0,data_len+1,grad_effects_len+1)
reg_grad_effects_2 <- matrix(0,data_len+1,grad_effects_len+1)
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model.txt",
data = list(
'temp_x'=temp,
'precip_x'=precip,
'gdp_y'=gdp,
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded,
'grad_effects_data'=grad_effects,
'grad_effects_2_data'=grad_effects_2,
'reg_grad_effects'=reg_grad_effects,
'reg_grad_effects_2'=reg_grad_effects_2
)
)
library(rjags)
library(coda)
library(tidyr)
library(data.table)
burke.data <- read.csv("environmental_bayesian_modeling/data/burke/data/input/GrowthClimateDataset.csv",header=TRUE)
burke.data <- burke.data %>% drop_na(c('growthWDI','UDel_temp_popweight','UDel_precip_popweight'))
# TODO: remove countries with no climate data
# TODO: add gradual effects
countries <- burke.data[,1]
years <- burke.data[,2]
gdp <- burke.data[,11]
temp <- burke.data[,28]
precip <- burke.data[,29]
grad_effects <- transpose(burke.data[, grep(pattern ='X_yi_*', names(burke.data))])
grad_effects_2 <- transpose(burke.data[, grep(pattern ='X_y2_*', names(burke.data))])
data_len <- dim(burke.data)[1]
num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
countries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model.txt",
data = list(
'temp_x'=temp,
'precip_x'=precip,
'gdp_y'=gdp,
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded
)
)
jags.output.coda <- coda.samples(
jags,
c(
'temp_gdp_coef',
'precip_gdp_coef',
'temp_gdp_coef_2',
'precip_gdp_coef_2'
),
10000
)
summary(jags.output.coda)
library(rjags)
library(coda)
library(tidyr)
library(data.table)
burke.data <- read.csv("environmental_bayesian_modeling/data/burke/data/input/GrowthClimateDataset.csv",header=TRUE)
burke.data <- burke.data %>% drop_na(c('growthWDI','UDel_temp_popweight','UDel_precip_popweight'))
# TODO: remove countries with no climate data
# TODO: add gradual effects
countries <- burke.data[,1]
years <- burke.data[,2]
gdp <- burke.data[,11]
temp <- burke.data[,28]
precip <- burke.data[,29]
grad_effects <- transpose(burke.data[, grep(pattern ='X_yi_*', names(burke.data))])
grad_effects_2 <- transpose(burke.data[, grep(pattern ='X_y2_*', names(burke.data))])
data_len <- dim(burke.data)[1]
num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
countries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model.txt",
data = list(
'temp_x'=temp,
'precip_x'=precip,
'gdp_y'=gdp,
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded
)
)
library(rjags)
library(coda)
library(tidyr)
library(data.table)
burke.data <- read.csv("environmental_bayesian_modeling/data/burke/data/input/GrowthClimateDataset.csv",header=TRUE)
burke.data <- burke.data %>% drop_na(c('growthWDI','UDel_temp_popweight','UDel_precip_popweight'))
# TODO: remove countries with no climate data
# TODO: add gradual effects
countries <- burke.data[,1]
years <- burke.data[,2]
gdp <- burke.data[,11]
temp <- burke.data[,28]
precip <- burke.data[,29]
grad_effects <- transpose(burke.data[, grep(pattern ='X_yi_*', names(burke.data))])
grad_effects_2 <- transpose(burke.data[, grep(pattern ='X_y2_*', names(burke.data))])
data_len <- dim(burke.data)[1]
num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
countries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model.txt",
data = list(
'temp_x'=temp,
'precip_x'=precip,
'gdp_y'=gdp,
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded
)
)
load("~/environmental_bayesian_modeling/models/burke_reproduction_unscaled.Rdata")
jags.output.coda
mean(jags.output.coda$precip)
jags.output.coda[[1]]
jags.output.coda[[1]][1]
jags.output.coda[[1]][2]
jags.output.coda[[1]][10000]
jags.output.coda[[1]][10001]
jags.output.coda[[1]][10000]
jags.output.coda[[1]][100000]
library(rjags)
library(coda)
library(tidyr)
library(data.table)
burke.data <- read.csv("environmental_bayesian_modeling/data/burke/data/input/GrowthClimateDatasetTruncated.csv",header=TRUE)
burke.data <- burke.data %>% drop_na(c('growthWDI','UDel_temp_popweight','UDel_precip_popweight'))
# TODO: remove countries with no climate data
# TODO: add gradual effects
countries <- burke.data[,1]
years <- burke.data[,2]
gdp <- burke.data[,11]
temp <- burke.data[,28]
precip <- burke.data[,29]
grad_effects <- transpose(burke.data[, grep(pattern ='X_yi_*', names(burke.data))])
grad_effects_2 <- transpose(burke.data[, grep(pattern ='X_y2_*', names(burke.data))])
data_len <- dim(burke.data)[1]
num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
countries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
scaled_temp <- scale(temp)
scaled_precip <- scale(precip)
scaled_gdp <- scale(gdp)
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model_covariate_deterministic.txt",
data = list(
'temp_x'=as.numeric(scaled_temp),
'precip_x'=as.numeric(scaled_precip),
'gdp_y'=as.numeric(scaled_gdp),
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded,
'grad_effects_data'=grad_effects,
'grad_effects_2_data'=grad_effects_2
)
)
library(rjags)
library(coda)
library(tidyr)
library(data.table)
burke.data <- read.csv("environmental_bayesian_modeling/data/burke/data/input/GrowthClimateDatasetTruncated.csv",header=TRUE)
burke.data <- burke.data %>% drop_na(c('growthWDI','UDel_temp_popweight','UDel_precip_popweight'))
# TODO: remove countries with no climate data
# TODO: add gradual effects
countries <- burke.data[,1]
years <- burke.data[,2]
gdp <- burke.data[,11]
temp <- burke.data[,28]
precip <- burke.data[,29]
grad_effects <- transpose(burke.data[, grep(pattern ='X_yi_*', names(burke.data))])
grad_effects_2 <- transpose(burke.data[, grep(pattern ='X_y2_*', names(burke.data))])
data_len <- dim(burke.data)[1]
num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
countries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
scaled_temp <- scale(temp)
scaled_precip <- scale(precip)
scaled_gdp <- scale(gdp)
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model_covariate_deterministic.txt",
data = list(
'temp_x'=as.numeric(scaled_temp),
'precip_x'=as.numeric(scaled_precip),
'gdp_y'=as.numeric(scaled_gdp),
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded,
'grad_effects_data'=grad_effects,
'grad_effects_2_data'=grad_effects_2
)
)
library(rjags)
library(coda)
library(tidyr)
library(data.table)
burke.data <- read.csv("environmental_bayesian_modeling/data/burke/data/input/GrowthClimateDatasetTruncated.csv",header=TRUE)
burke.data <- burke.data %>% drop_na(c('growthWDI','UDel_temp_popweight','UDel_precip_popweight'))
# TODO: remove countries with no climate data
# TODO: add gradual effects
countries <- burke.data[,1]
years <- burke.data[,2]
gdp <- burke.data[,11]
temp <- burke.data[,28]
precip <- burke.data[,29]
grad_effects <- transpose(burke.data[, grep(pattern ='X_yi_*', names(burke.data))])
grad_effects_2 <- transpose(burke.data[, grep(pattern ='X_y2_*', names(burke.data))])
data_len <- dim(burke.data)[1]
num_countries <- length(unique(countries))
num_years <- length(unique(years))
grad_effects_len <- dim(grad_effects)[1]
countries_encoded <- as.integer(factor(countries))
years_encoded = as.integer(factor(years))
scaled_temp <- scale(temp)
scaled_precip <- scale(precip)
scaled_gdp <- scale(gdp)
jags <- jags.model(
"environmental_bayesian_modeling/JAGS/burke_hierarchical_model_covariate_deterministic.txt",
data = list(
'temp_x'=as.numeric(scaled_temp),
'precip_x'=as.numeric(scaled_precip),
'gdp_y'=as.numeric(scaled_gdp),
'n'=data_len,
'm'=num_countries,
'o'=num_years,
'p'=grad_effects_len,
'countries'=countries_encoded,
'year'=years_encoded,
'grad_effects_data'=grad_effects,
'grad_effects_2_data'=grad_effects_2
)
)
View(burke.data)
load("~/environmental_bayesian_modeling/models/nature_reproduction/burke_reproduction_scaled_deterministic_covariates_4_chains.RData")
temp_coef <- jags.output.coda[[1]][,5]
temp_coef_2 <- jags.output.coda[[1]][,6]
temp_denominator <- sapply(temp_coef_2, function(i){i*-2})
temp_vertex <- temp_coef / temp_denominator
temp_observed_mean <- attributes(scaled_temp)$`scaled:center`
temp_observed_sd <- attributes(scaled_temp)$`scaled:scale`
unscaled_temp_vertex <- (temp_vertex * temp_observed_sd) + temp_observed_mean
print(mean(unscaled_temp_vertex))
print(sd(unscaled_temp_vertex))
temp_coef <- jags.output.coda[[2]][,5]
jags.output.coda
result <- c("test")
save.image(file='environmental_bayesian_modeling/yoursession.RData')
load("~/environmental_bayesian_modeling/yoursession.RData")
load("~/environmental_bayesian_modeling/yoursession.RData")
load("~/environmental_bayesian_modeling/models/nature_reproduction/burke_missing_data_imputed_hierarchical_country_priors.RData")
temp_coef <- as.vector(rbind(jags.output.coda[[1]][,5],jags.output.coda[[2]][,5],jags.output.coda[[3]][,5],jags.output.coda[[4]][,5]))
temp_coef_2 <- as.vector(rbind(jags.output.coda[[1]][,6],jags.output.coda[[2]][,6],jags.output.coda[[3]][,6],jags.output.coda[[4]][,6]))
temp_denominator <- sapply(temp_coef_2, function(i){i*-2})
temp_vertex <- temp_coef / temp_denominator
temp_observed_mean <- attributes(scaled_temp)$`scaled:center`
temp_observed_sd <- attributes(scaled_temp)$`scaled:scale`
unscaled_temp_vertex <- (temp_vertex * temp_observed_sd) + temp_observed_mean
print(mean(unscaled_temp_vertex))
print(sd(unscaled_temp_vertex))
coda::gelman.diag(jags.output.coda)
plot(jags.output.coda)
coda::gelman.plot(jags.output.coda)
temp_coef <- jags.output.coda[[1]][,5]
temp_coef_2 <- jags.output.coda[[1]][,6]
temp_denominator <- sapply(temp_coef_2, function(i){i*-2})
temp_vertex <- temp_coef / temp_denominator
temp_observed_mean <- attributes(scaled_temp)$`scaled:center`
temp_observed_sd <- attributes(scaled_temp)$`scaled:scale`
unscaled_temp_vertex <- (temp_vertex * temp_observed_sd) + temp_observed_mean
print(mean(unscaled_temp_vertex))
print(sd(unscaled_temp_vertex))
temp_coef <- jags.output.coda[[2]][,5]
> temp_coef_2 <- jags.output.coda[[2]][,6]
temp_coef <- jags.output.coda[[2]][,5]
temp_coef_2 <- jags.output.coda[[2]][,6]
temp_denominator <- sapply(temp_coef_2, function(i){i*-2})
temp_vertex <- temp_coef / temp_denominator
temp_observed_mean <- attributes(scaled_temp)$`scaled:center`
temp_observed_sd <- attributes(scaled_temp)$`scaled:scale`
unscaled_temp_vertex <- (temp_vertex * temp_observed_sd) + temp_observed_mean
print(mean(unscaled_temp_vertex))
coda::effective_size(jags.output.coda)
effective_size(jags.output.coda)
coda::effectiveSize(jags.output.coda)
jags.output.coda <- thin(jags.output.coda,2)
jags.output.coda <- coda::thin(jags.output.coda,2)
jags.output.coda
jags.output.coda[[1]]
load("~/environmental_bayesian_modeling/models/nature_reproduction/burke_missing_data_imputed_hierarchical_country_priors.RData")
jags.outout.coda
print(jags.output.coda)
thinned_chain <- coda::thin(jags.output.coda)
print(thinned_chain)
thinned_chain <- jags.output.coda[seq(1, length(jags.output.coda), by = 2), ]
print(thinned_chain)
thinned_chain <- jags.output.coda[seq(1, 1000, by = 2), ]
thinned_chain
coda::gelman.diag(jags.output.coda)
coda::gelman.diag(thinned_chain)
thinned_chain
jags.output.coda
mcmc.list(thinned_chain)
thinned_chain <- coda::window(jags.output.coda, 0, 1000, 2)
thinned_chain <- window(jags.output.coda, 0, 1000, 2)
thinned_chain <- window(jags.output.coda[[1]], 0, 1000, 2)
thinned_chain <- coda::window.mcmc(jags.output.coda, 0, 1000, 2)
thinned_chain <- coda::window.mcmc(jags.output.coda, thin=2)
thinned_chain <- window(jags.output.coda, thin=2)
thinned_chain
coda::gelman.diag(thinned_chain)
coda::gelman.diag(jags.output.coda)
thinned_chain <- window(jags.output.coda, thin=10)
coda::gelman.diag(thinned_chain)
load("~/environmental_bayesian_modeling/models/nature_reproduction/burke_reproduction_scaled_deterministic_covariates_4_chains.RData")
temp_coef <- as.vector(rbind(jags.output.coda[[1]][,5],jags.output.coda[[2]][,5],jags.output.coda[[3]][,5],jags.output.coda[[4]][,5]))
temp_coef_2 <- as.vector(rbind(jags.output.coda[[1]][,6],jags.output.coda[[2]][,6],jags.output.coda[[3]][,6],jags.output.coda[[4]][,6]))
temp_denominator <- sapply(temp_coef_2, function(i){i*-2})
temp_vertex <- temp_coef / temp_denominator
temp_observed_mean <- attributes(scaled_temp)$`scaled:center`
temp_observed_sd <- attributes(scaled_temp)$`scaled:scale`
unscaled_temp_vertex <- (temp_vertex * temp_observed_sd) + temp_observed_mean
print(mean(unscaled_temp_vertex))
print(sd(unscaled_temp_vertex))
coda::gelman.diag(jags.output.coda)
coda::effective_size(jags.output.coda)
load("~/environmental_bayesian_modeling/models/nature_reproduction/burke_missing_data_imputed_hierarchical_country_priors.RData")
temp_coef <- as.vector(rbind(jags.output.coda[[1]][,5],jags.output.coda[[2]][,5],jags.output.coda[[3]][,5],jags.output.coda[[4]][,5]))
temp_coef_2 <- as.vector(rbind(jags.output.coda[[1]][,6],jags.output.coda[[2]][,6],jags.output.coda[[3]][,6],jags.output.coda[[4]][,6]))
temp_denominator <- sapply(temp_coef_2, function(i){i*-2})
temp_vertex <- temp_coef / temp_denominator
temp_observed_mean <- attributes(scaled_temp)$`scaled:center`
temp_observed_sd <- attributes(scaled_temp)$`scaled:scale`
unscaled_temp_vertex <- (temp_vertex * temp_observed_sd) + temp_observed_mean
print(mean(unscaled_temp_vertex))
print(sd(unscaled_temp_vertex))
coda::gelman.diag(jags.output.coda)
coda::effective_size(jags.output.coda)
plot(jags.output.coda)
library(stringmagic)
library(fixest)
regdata <- read.csv("data2/regdata_train.csv")
setwd("environmental_bayesian_modeling/data/ortiz-bobea")
regdata <- read.csv("data2/regdata_train.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year")
reg <- feols(regdata, f)
summary(reg)
library(lfe)
regdata <- read.csv("data2/regdata_train.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year | 0 | ISO3 + block")
reg <- felm(f, regdata, Nboot=1000, keepCX=T, keepX=T, clustervar=as.factor(regdata$block), weights=regdata$weights)
summary(reg)
regdata <- read.csv("data2/regdata_train.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year | 0 | ISO3 + block")
reg <- felm(f, regdata, Nboot=1000, keepCX=T, keepX=T, clustervar=as.factor(regdata$block), weights=regdata$weights)
summary(reg)
regdata <- read.csv("data2/regdata_train.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year")
reg <- feols(regdata, f)
summary(reg)
fixef(regd)
fixef(reg)
regdata <- read.csv("data2/regdata_train.csv")
f2 <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year | 0 | ISO3 + block")
reg2 <- felm(f2, regdata, Nboot=1000, keepCX=T, keepX=T, clustervar=as.factor(regdata$block), weights=regdata$weights)
summary(reg2)
fixef(reg2)
getfe(reg2)
getfe(reg2$boot)
boot = reg2$boot
View(boot)
getfe(boot)
reg <- feols(regdata, f, boot=1000)
regdata <- read.csv("data2/regdata_train.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year | 0 | ISO3 + block")
reg <- felm(f, regdata, Nboot=1000, keepCX=T, keepX=T, clustervar=as.factor(regdata$block), weights=regdata$weights)
regdata <- read.csv("data2/regdata_train.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year | 0 | ISO3 + block")
reg <- felm(f, regdata, keepCX=T, keepX=T, clustervar=as.factor(regdata$block), weights=regdata$weights)
summary(reg)
reg$vcv
regdata <- read.csv("data2/regdata_train.csv")
f <- as.formula("fd_log_tfp ~ fd_tmean + fd_tmean_sq + fd_prcp + fd_prcp_sq | ISO3 + year | 0 | ISO3 + block")
reg <- felm(f, regdata, Nboot=1000, keepCX=T, keepX=T, clustervar=as.factor(regdata$block), weights=regdata$weights)
summary(reg)
